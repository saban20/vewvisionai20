{"ast":null,"code":"var _jsxFileName = \"/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/components/FaceScanner/GamifiedMeasurement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Box, Typography, Button, LinearProgress, Paper, Dialog, DialogTitle, DialogContent, DialogActions, IconButton, Stack, useTheme } from '@mui/material';\nimport { CheckCircleOutline as CheckIcon, Close as CloseIcon, EmojiEvents as TrophyIcon, SportsEsports as GameIcon, Camera as CameraIcon, Refresh as RefreshIcon } from '@mui/icons-material';\n\n/**\n * GamifiedMeasurement component\n * A fun, interactive way to get accurate facial measurements\n * using webcam and gamification techniques\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamifiedMeasurement = ({\n  onMeasurementComplete\n}) => {\n  _s();\n  const theme = useTheme();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const measuringPointsRef = useRef([]);\n\n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameStep, setGameStep] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [timerInterval, setTimerInterval] = useState(null);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const [cameraReady, setCameraReady] = useState(false);\n  const [currentMeasurement, setCurrentMeasurement] = useState(null);\n  const [measurementPoints, setMeasurementPoints] = useState([]);\n  const [isCalibrating, setIsCalibrating] = useState(false);\n  const [calibrationProgress, setCalibrationProgress] = useState(0);\n\n  // Game steps/challenges\n  const gameSteps = [{\n    id: 'pupillary',\n    title: 'Measure Pupillary Distance',\n    instruction: 'Click on the center of each pupil to measure the distance between your eyes.',\n    pointsNeeded: 2,\n    successMessage: 'Great! We measured your pupillary distance.',\n    image: '👁️ 📏 👁️',\n    measurementUnits: 'mm'\n  }, {\n    id: 'temple_width',\n    title: 'Measure Temple Width',\n    instruction: 'Click on each temple (side of your head) to measure the width.',\n    pointsNeeded: 2,\n    successMessage: 'Perfect! Temple width recorded.',\n    image: '👂 📏 👂',\n    measurementUnits: 'mm'\n  }, {\n    id: 'face_height',\n    title: 'Measure Face Height',\n    instruction: 'Click on your chin and then the top of your forehead to measure face height.',\n    pointsNeeded: 2,\n    successMessage: 'Excellent! Face height measured.',\n    image: '⬆️ 📏 ⬇️',\n    measurementUnits: 'mm'\n  }, {\n    id: 'bridge',\n    title: 'Measure Bridge Width',\n    instruction: 'Click on each side of the bridge of your nose to measure width.',\n    pointsNeeded: 2,\n    successMessage: 'Well done! Bridge width recorded.',\n    image: '👃 📏',\n    measurementUnits: 'mm'\n  }];\n\n  // Initialize camera\n  useEffect(() => {\n    const setupCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: {\n              ideal: 1280\n            },\n            height: {\n              ideal: 720\n            },\n            facingMode: 'user'\n          }\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          videoRef.current.onloadedmetadata = () => {\n            setCameraReady(true);\n            setShowInstruction(true);\n          };\n        }\n      } catch (err) {\n        console.error('Error accessing camera:', err);\n        alert('Camera access is required for measurement. Please allow camera access and reload the page.');\n      }\n    };\n    setupCamera();\n\n    // Cleanup\n    return () => {\n      if (videoRef.current && videoRef.current.srcObject) {\n        const tracks = videoRef.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, []);\n\n  // Start game timer when game starts\n  useEffect(() => {\n    if (gameStarted && !timerInterval) {\n      const interval = setInterval(() => {\n        setTimer(prev => prev + 1);\n      }, 1000);\n      setTimerInterval(interval);\n    }\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [gameStarted, timerInterval]);\n\n  // Start calibration process\n  const startCalibration = () => {\n    setIsCalibrating(true);\n    setCalibrationProgress(0);\n\n    // Simulate calibration progress\n    const interval = setInterval(() => {\n      setCalibrationProgress(prev => {\n        const newProgress = prev + 5;\n        if (newProgress >= 100) {\n          clearInterval(interval);\n          setIsCalibrating(false);\n          setGameStarted(true);\n          return 100;\n        }\n        return newProgress;\n      });\n    }, 150);\n  };\n\n  // Handle game start\n  const handleStartGame = () => {\n    setGameStarted(true);\n    setGameStep(0);\n    setScore(0);\n    setTimer(0);\n    setShowInstruction(false);\n    setMeasurementPoints([]);\n    measuringPointsRef.current = [];\n    setCurrentMeasurement(gameSteps[0]);\n  };\n\n  // Handle canvas click (for marking measurement points)\n  const handleCanvasClick = e => {\n    if (!gameStarted || isCalibrating) return;\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    if (!canvas || !video) return;\n\n    // Get canvas bounds\n    const rect = canvas.getBoundingClientRect();\n\n    // Calculate click position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Calculate scale factors (if video and canvas have different dimensions)\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    // Calculate actual coordinates on the canvas\n    const canvasX = x * scaleX;\n    const canvasY = y * scaleY;\n\n    // Add point to measurement\n    const newPoint = {\n      x: canvasX,\n      y: canvasY\n    };\n    const updatedPoints = [...measuringPointsRef.current, newPoint];\n    measuringPointsRef.current = updatedPoints;\n    setMeasurementPoints(updatedPoints);\n\n    // Check if we have enough points for current measurement\n    const currentStep = gameSteps[gameStep];\n    if (updatedPoints.length >= currentStep.pointsNeeded) {\n      // Calculate measurement\n      calculateMeasurement(updatedPoints, currentStep.id);\n\n      // Show success message\n      setShowSuccess(true);\n\n      // Add points to score\n      setScore(prev => prev + 10);\n\n      // Clear for next measurement after brief delay\n      setTimeout(() => {\n        setShowSuccess(false);\n\n        // Move to next measurement or finish\n        if (gameStep < gameSteps.length - 1) {\n          setGameStep(prev => prev + 1);\n          setCurrentMeasurement(gameSteps[gameStep + 1]);\n          measuringPointsRef.current = [];\n          setMeasurementPoints([]);\n        } else {\n          // Game complete, compile all measurements\n          compileMeasurements();\n        }\n      }, 1500);\n    }\n  };\n\n  // Calculate measurement based on points and type\n  const calculateMeasurement = (points, measurementType) => {\n    if (points.length < 2) return 0;\n\n    // Calculate distance between two points (Euclidean distance)\n    const calculateDistance = (p1, p2) => {\n      return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n    };\n\n    // Get pixel distance\n    const pixelDistance = calculateDistance(points[0], points[1]);\n\n    // Convert to mm (this is a mock conversion - in real app would be calibrated)\n    // For demo, we're using arbitrary conversion factors\n    let mmDistance = 0;\n    let accuracy = 0;\n    switch (measurementType) {\n      case 'pupillary':\n        // Typical PD range is 54-74mm\n        mmDistance = 54 + pixelDistance / 10;\n        accuracy = Math.min(100, 70 + Math.random() * 30); // Random accuracy for demo\n        break;\n      case 'temple_width':\n        // Typical temple width range is 130-150mm\n        mmDistance = 130 + pixelDistance / 15;\n        accuracy = Math.min(100, 70 + Math.random() * 30);\n        break;\n      case 'face_height':\n        // Typical face height range is 180-230mm\n        mmDistance = 180 + pixelDistance / 20;\n        accuracy = Math.min(100, 70 + Math.random() * 30);\n        break;\n      case 'bridge':\n        // Typical bridge width range is 15-25mm\n        mmDistance = 15 + pixelDistance / 30;\n        accuracy = Math.min(100, 70 + Math.random() * 30);\n        break;\n      default:\n        mmDistance = pixelDistance / 10;\n        accuracy = 70;\n    }\n\n    // Update accuracy state\n    setAccuracy(prev => Math.max(prev, Math.floor(accuracy)));\n\n    // Store measurement result\n    const result = {\n      type: measurementType,\n      value: parseFloat(mmDistance.toFixed(1)),\n      accuracy: parseFloat(accuracy.toFixed(1)),\n      timestamp: new Date().toISOString()\n    };\n\n    // Add to measurements array in component state\n    gameSteps[gameStep].measurement = result;\n  };\n\n  // Compile all measurements when game is complete\n  const compileMeasurements = () => {\n    var _gameSteps$find, _gameSteps$find$measu, _gameSteps$find2, _gameSteps$find2$meas, _gameSteps$find3, _gameSteps$find3$meas, _gameSteps$find4, _gameSteps$find4$meas;\n    // Generate measurement results from all steps\n    const results = {\n      pupillaryDistance: ((_gameSteps$find = gameSteps.find(step => step.id === 'pupillary')) === null || _gameSteps$find === void 0 ? void 0 : (_gameSteps$find$measu = _gameSteps$find.measurement) === null || _gameSteps$find$measu === void 0 ? void 0 : _gameSteps$find$measu.value) || 63,\n      templeLength: ((_gameSteps$find2 = gameSteps.find(step => step.id === 'temple_width')) === null || _gameSteps$find2 === void 0 ? void 0 : (_gameSteps$find2$meas = _gameSteps$find2.measurement) === null || _gameSteps$find2$meas === void 0 ? void 0 : _gameSteps$find2$meas.value) || 140,\n      bridgeWidth: ((_gameSteps$find3 = gameSteps.find(step => step.id === 'bridge')) === null || _gameSteps$find3 === void 0 ? void 0 : (_gameSteps$find3$meas = _gameSteps$find3.measurement) === null || _gameSteps$find3$meas === void 0 ? void 0 : _gameSteps$find3$meas.value) || 18,\n      faceHeight: ((_gameSteps$find4 = gameSteps.find(step => step.id === 'face_height')) === null || _gameSteps$find4 === void 0 ? void 0 : (_gameSteps$find4$meas = _gameSteps$find4.measurement) === null || _gameSteps$find4$meas === void 0 ? void 0 : _gameSteps$find4$meas.value) || 200,\n      frameWidth: 0,\n      // Calculated from other measurements\n      lensWidth: 0,\n      // Calculated\n      lensHeight: 0,\n      // Calculated\n      scanQuality: accuracy / 100,\n      completionTime: timer,\n      scanDataURL: null,\n      // Would be a data URL of a face scan in a real app\n      timestamp: new Date().toISOString()\n    };\n\n    // Calculate additional measurements\n    results.frameWidth = results.templeLength * 0.9; // Approximate\n    results.lensWidth = results.pupillaryDistance * 0.75; // Approximate\n    results.lensHeight = results.lensWidth * 0.6; // Common aspect ratio\n\n    // Show completion dialog and call callback\n    onMeasurementComplete(results);\n\n    // Reset game state\n    setGameStarted(false);\n    clearInterval(timerInterval);\n    setTimerInterval(null);\n  };\n\n  // Draw measuring points and lines on canvas\n  useEffect(() => {\n    if (!canvasRef.current || !videoRef.current || !cameraReady) return;\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const drawFrame = () => {\n      // Draw video frame\n      ctx.drawImage(video, 0, 0);\n\n      // Draw measurement points\n      if (measurementPoints.length > 0) {\n        measurementPoints.forEach((point, index) => {\n          // Draw point\n          ctx.beginPath();\n          ctx.arc(point.x, point.y, 8, 0, Math.PI * 2);\n          ctx.fillStyle = theme.palette.primary.main;\n          ctx.fill();\n\n          // Draw point number\n          ctx.font = '16px Arial';\n          ctx.fillStyle = 'white';\n          ctx.fillText(index + 1, point.x - 5, point.y + 5);\n        });\n\n        // Draw line between points\n        if (measurementPoints.length >= 2) {\n          ctx.beginPath();\n          ctx.moveTo(measurementPoints[0].x, measurementPoints[0].y);\n          ctx.lineTo(measurementPoints[1].x, measurementPoints[1].y);\n          ctx.strokeStyle = theme.palette.secondary.main;\n          ctx.lineWidth = 3;\n          ctx.stroke();\n\n          // Calculate and display distance\n          const dx = measurementPoints[1].x - measurementPoints[0].x;\n          const dy = measurementPoints[1].y - measurementPoints[0].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          // Convert to approximate mm (mock)\n          const currentStep = gameSteps[gameStep];\n          let mmDistance = 0;\n          switch (currentStep.id) {\n            case 'pupillary':\n              mmDistance = 54 + distance / 10;\n              break;\n            case 'temple_width':\n              mmDistance = 130 + distance / 15;\n              break;\n            case 'face_height':\n              mmDistance = 180 + distance / 20;\n              break;\n            case 'bridge':\n              mmDistance = 15 + distance / 30;\n              break;\n            default:\n              mmDistance = distance / 10;\n          }\n\n          // Draw distance text\n          const midX = (measurementPoints[0].x + measurementPoints[1].x) / 2;\n          const midY = (measurementPoints[0].y + measurementPoints[1].y) / 2 - 20;\n          ctx.font = 'bold 16px Arial';\n          ctx.fillStyle = 'white';\n          ctx.strokeStyle = 'black';\n          ctx.lineWidth = 3;\n          const text = `${mmDistance.toFixed(1)} ${currentStep.measurementUnits}`;\n          ctx.strokeText(text, midX - 30, midY);\n          ctx.fillText(text, midX - 30, midY);\n        }\n      }\n\n      // Show calibration overlay during calibration\n      if (isCalibrating) {\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // Draw face outline\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.ellipse(canvas.width / 2, canvas.height / 2, canvas.width / 4, canvas.height / 3, 0, 0, Math.PI * 2);\n        ctx.stroke();\n\n        // Draw text\n        ctx.font = '24px Arial';\n        ctx.fillStyle = 'white';\n        ctx.textAlign = 'center';\n        ctx.fillText('Calibrating...', canvas.width / 2, canvas.height / 2 - 100);\n        ctx.fillText(`${calibrationProgress}%`, canvas.width / 2, canvas.height / 2 + 120);\n      }\n      requestAnimationFrame(drawFrame);\n    };\n    const frameId = requestAnimationFrame(drawFrame);\n    return () => {\n      cancelAnimationFrame(frameId);\n    };\n  }, [cameraReady, measurementPoints, isCalibrating, calibrationProgress, gameStep, theme]);\n\n  // Render instruction dialog\n  const renderInstructionDialog = () => /*#__PURE__*/_jsxDEV(Dialog, {\n    open: showInstruction && cameraReady,\n    onClose: () => setShowInstruction(false),\n    maxWidth: \"sm\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        alignItems: \"center\",\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(GameIcon, {\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Face Measurement Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        paragraph: true,\n        children: \"Let's make face measurements fun! Follow these simple steps:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Paper, {\n          variant: \"outlined\",\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            fontWeight: \"bold\",\n            children: \"1. Camera Calibration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"We'll first calibrate the camera to ensure accurate measurements. Just position your face in the center of the frame.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          variant: \"outlined\",\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            fontWeight: \"bold\",\n            children: \"2. Follow Instructions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"For each measurement, you'll be asked to click on specific points on your face. Be as precise as possible for better results!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          variant: \"outlined\",\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            fontWeight: \"bold\",\n            children: \"3. Complete All Measurements\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Complete all measurements to get your final score and accurate eyewear recommendations.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          setShowInstruction(false);\n          startCalibration();\n        },\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(CameraIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 22\n        }, this),\n        children: \"Start Calibration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'relative'\n    },\n    children: [gameStarted && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mb: 2,\n        px: 2,\n        py: 1,\n        backgroundColor: theme.palette.background.paper,\n        borderRadius: 1,\n        boxShadow: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Score:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this), \" \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Accuracy:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this), \" \", accuracy, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this), \" \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 9\n    }, this), gameStarted && currentMeasurement && /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 2,\n        mb: 2,\n        backgroundColor: theme.palette.primary.main,\n        color: 'white'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: currentMeasurement.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: currentMeasurement.instruction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        sx: {\n          my: 1\n        },\n        children: currentMeasurement.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        fontStyle: \"italic\",\n        children: [\"Click Points: \", measurementPoints.length, \"/\", currentMeasurement.pointsNeeded]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        height: 450,\n        backgroundColor: '#000',\n        borderRadius: 2,\n        overflow: 'hidden'\n      },\n      onClick: handleCanvasClick,\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        style: {\n          width: '100%',\n          height: '100%',\n          objectFit: 'cover'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 9\n      }, this), showSuccess && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          zIndex: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(CheckIcon, {\n          sx: {\n            fontSize: 60,\n            color: 'lightgreen',\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            color: 'white',\n            textShadow: '1px 1px 3px rgba(0,0,0,0.7)'\n          },\n          children: gameSteps[gameStep].successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 11\n      }, this), isCalibrating && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'absolute',\n          bottom: 0,\n          left: 0,\n          width: '100%',\n          bgcolor: 'rgba(0, 0, 0, 0.7)',\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            color: 'white',\n            mb: 1\n          },\n          children: \"Calibrating Camera...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n          variant: \"determinate\",\n          value: calibrationProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this), !gameStarted && !isCalibrating && cameraReady && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: 'rgba(0, 0, 0, 0.6)',\n          zIndex: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(GameIcon, {\n          sx: {\n            fontSize: 48,\n            color: 'white',\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          sx: {\n            color: 'white',\n            mb: 3\n          },\n          children: \"Face Measurement Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          startIcon: /*#__PURE__*/_jsxDEV(GameIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 26\n          }, this),\n          onClick: handleStartGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 11\n      }, this), !cameraReady && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\n          zIndex: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            color: 'white',\n            mb: 2\n          },\n          children: \"Initializing Camera...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n          sx: {\n            width: '50%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), renderInstructionDialog()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 504,\n    columnNumber: 5\n  }, this);\n};\n_s(GamifiedMeasurement, \"YYhk5FErSkHAE4I//38vdky+U1s=\", false, function () {\n  return [useTheme];\n});\n_c = GamifiedMeasurement;\nexport default GamifiedMeasurement;\nvar _c;\n$RefreshReg$(_c, \"GamifiedMeasurement\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","Typography","Button","LinearProgress","Paper","Dialog","DialogTitle","DialogContent","DialogActions","IconButton","Stack","useTheme","CheckCircleOutline","CheckIcon","Close","CloseIcon","EmojiEvents","TrophyIcon","SportsEsports","GameIcon","Camera","CameraIcon","Refresh","RefreshIcon","jsxDEV","_jsxDEV","GamifiedMeasurement","onMeasurementComplete","_s","theme","videoRef","canvasRef","measuringPointsRef","gameStarted","setGameStarted","gameStep","setGameStep","score","setScore","timer","setTimer","accuracy","setAccuracy","timerInterval","setTimerInterval","showSuccess","setShowSuccess","showInstruction","setShowInstruction","cameraReady","setCameraReady","currentMeasurement","setCurrentMeasurement","measurementPoints","setMeasurementPoints","isCalibrating","setIsCalibrating","calibrationProgress","setCalibrationProgress","gameSteps","id","title","instruction","pointsNeeded","successMessage","image","measurementUnits","setupCamera","stream","navigator","mediaDevices","getUserMedia","video","width","ideal","height","facingMode","current","srcObject","onloadedmetadata","err","console","error","alert","tracks","getTracks","forEach","track","stop","clearInterval","interval","setInterval","prev","startCalibration","newProgress","handleStartGame","handleCanvasClick","e","canvas","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","scaleX","scaleY","canvasX","canvasY","newPoint","updatedPoints","currentStep","length","calculateMeasurement","setTimeout","compileMeasurements","points","measurementType","calculateDistance","p1","p2","Math","sqrt","pow","pixelDistance","mmDistance","min","random","max","floor","result","type","value","parseFloat","toFixed","timestamp","Date","toISOString","measurement","_gameSteps$find","_gameSteps$find$measu","_gameSteps$find2","_gameSteps$find2$meas","_gameSteps$find3","_gameSteps$find3$meas","_gameSteps$find4","_gameSteps$find4$meas","results","pupillaryDistance","find","step","templeLength","bridgeWidth","faceHeight","frameWidth","lensWidth","lensHeight","scanQuality","completionTime","scanDataURL","ctx","getContext","videoWidth","videoHeight","drawFrame","drawImage","point","index","beginPath","arc","PI","fillStyle","palette","primary","main","fill","font","fillText","moveTo","lineTo","strokeStyle","secondary","lineWidth","stroke","dx","dy","distance","midX","midY","text","strokeText","fillRect","ellipse","textAlign","requestAnimationFrame","frameId","cancelAnimationFrame","renderInstructionDialog","open","onClose","maxWidth","fullWidth","children","direction","alignItems","spacing","color","fileName","_jsxFileName","lineNumber","columnNumber","variant","paragraph","sx","p","gutterBottom","fontWeight","onClick","startIcon","position","display","justifyContent","mb","px","py","backgroundColor","background","paper","borderRadius","boxShadow","elevation","align","my","fontStyle","overflow","ref","autoPlay","playsInline","muted","style","objectFit","flexDirection","zIndex","fontSize","textShadow","bottom","bgcolor","size","_c","$RefreshReg$"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/components/FaceScanner/GamifiedMeasurement.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { \n  Box, \n  Typography, \n  Button, \n  LinearProgress, \n  Paper,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  IconButton,\n  Stack,\n  useTheme\n} from '@mui/material';\nimport {\n  CheckCircleOutline as CheckIcon,\n  Close as CloseIcon,\n  EmojiEvents as TrophyIcon,\n  SportsEsports as GameIcon,\n  Camera as CameraIcon,\n  Refresh as RefreshIcon\n} from '@mui/icons-material';\n\n/**\n * GamifiedMeasurement component\n * A fun, interactive way to get accurate facial measurements\n * using webcam and gamification techniques\n */\nconst GamifiedMeasurement = ({ onMeasurementComplete }) => {\n  const theme = useTheme();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const measuringPointsRef = useRef([]);\n  \n  // Game state\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameStep, setGameStep] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [timerInterval, setTimerInterval] = useState(null);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showInstruction, setShowInstruction] = useState(true);\n  const [cameraReady, setCameraReady] = useState(false);\n  const [currentMeasurement, setCurrentMeasurement] = useState(null);\n  const [measurementPoints, setMeasurementPoints] = useState([]);\n  const [isCalibrating, setIsCalibrating] = useState(false);\n  const [calibrationProgress, setCalibrationProgress] = useState(0);\n  \n  // Game steps/challenges\n  const gameSteps = [\n    {\n      id: 'pupillary',\n      title: 'Measure Pupillary Distance',\n      instruction: 'Click on the center of each pupil to measure the distance between your eyes.',\n      pointsNeeded: 2,\n      successMessage: 'Great! We measured your pupillary distance.',\n      image: '👁️ 📏 👁️',\n      measurementUnits: 'mm'\n    },\n    {\n      id: 'temple_width',\n      title: 'Measure Temple Width',\n      instruction: 'Click on each temple (side of your head) to measure the width.',\n      pointsNeeded: 2,\n      successMessage: 'Perfect! Temple width recorded.',\n      image: '👂 📏 👂',\n      measurementUnits: 'mm'\n    },\n    {\n      id: 'face_height',\n      title: 'Measure Face Height',\n      instruction: 'Click on your chin and then the top of your forehead to measure face height.',\n      pointsNeeded: 2,\n      successMessage: 'Excellent! Face height measured.',\n      image: '⬆️ 📏 ⬇️',\n      measurementUnits: 'mm'\n    },\n    {\n      id: 'bridge',\n      title: 'Measure Bridge Width',\n      instruction: 'Click on each side of the bridge of your nose to measure width.',\n      pointsNeeded: 2,\n      successMessage: 'Well done! Bridge width recorded.',\n      image: '👃 📏',\n      measurementUnits: 'mm'\n    }\n  ];\n  \n  // Initialize camera\n  useEffect(() => {\n    const setupCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: { \n            width: { ideal: 1280 },\n            height: { ideal: 720 },\n            facingMode: 'user'\n          }\n        });\n        \n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          videoRef.current.onloadedmetadata = () => {\n            setCameraReady(true);\n            setShowInstruction(true);\n          };\n        }\n      } catch (err) {\n        console.error('Error accessing camera:', err);\n        alert('Camera access is required for measurement. Please allow camera access and reload the page.');\n      }\n    };\n    \n    setupCamera();\n    \n    // Cleanup\n    return () => {\n      if (videoRef.current && videoRef.current.srcObject) {\n        const tracks = videoRef.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n      \n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, []);\n  \n  // Start game timer when game starts\n  useEffect(() => {\n    if (gameStarted && !timerInterval) {\n      const interval = setInterval(() => {\n        setTimer(prev => prev + 1);\n      }, 1000);\n      setTimerInterval(interval);\n    }\n    \n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [gameStarted, timerInterval]);\n  \n  // Start calibration process\n  const startCalibration = () => {\n    setIsCalibrating(true);\n    setCalibrationProgress(0);\n    \n    // Simulate calibration progress\n    const interval = setInterval(() => {\n      setCalibrationProgress(prev => {\n        const newProgress = prev + 5;\n        if (newProgress >= 100) {\n          clearInterval(interval);\n          setIsCalibrating(false);\n          setGameStarted(true);\n          return 100;\n        }\n        return newProgress;\n      });\n    }, 150);\n  };\n  \n  // Handle game start\n  const handleStartGame = () => {\n    setGameStarted(true);\n    setGameStep(0);\n    setScore(0);\n    setTimer(0);\n    setShowInstruction(false);\n    setMeasurementPoints([]);\n    measuringPointsRef.current = [];\n    setCurrentMeasurement(gameSteps[0]);\n  };\n  \n  // Handle canvas click (for marking measurement points)\n  const handleCanvasClick = (e) => {\n    if (!gameStarted || isCalibrating) return;\n    \n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    \n    if (!canvas || !video) return;\n    \n    // Get canvas bounds\n    const rect = canvas.getBoundingClientRect();\n    \n    // Calculate click position relative to canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Calculate scale factors (if video and canvas have different dimensions)\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    \n    // Calculate actual coordinates on the canvas\n    const canvasX = x * scaleX;\n    const canvasY = y * scaleY;\n    \n    // Add point to measurement\n    const newPoint = { x: canvasX, y: canvasY };\n    const updatedPoints = [...measuringPointsRef.current, newPoint];\n    measuringPointsRef.current = updatedPoints;\n    setMeasurementPoints(updatedPoints);\n    \n    // Check if we have enough points for current measurement\n    const currentStep = gameSteps[gameStep];\n    if (updatedPoints.length >= currentStep.pointsNeeded) {\n      // Calculate measurement\n      calculateMeasurement(updatedPoints, currentStep.id);\n      \n      // Show success message\n      setShowSuccess(true);\n      \n      // Add points to score\n      setScore(prev => prev + 10);\n      \n      // Clear for next measurement after brief delay\n      setTimeout(() => {\n        setShowSuccess(false);\n        \n        // Move to next measurement or finish\n        if (gameStep < gameSteps.length - 1) {\n          setGameStep(prev => prev + 1);\n          setCurrentMeasurement(gameSteps[gameStep + 1]);\n          measuringPointsRef.current = [];\n          setMeasurementPoints([]);\n        } else {\n          // Game complete, compile all measurements\n          compileMeasurements();\n        }\n      }, 1500);\n    }\n  };\n  \n  // Calculate measurement based on points and type\n  const calculateMeasurement = (points, measurementType) => {\n    if (points.length < 2) return 0;\n    \n    // Calculate distance between two points (Euclidean distance)\n    const calculateDistance = (p1, p2) => {\n      return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n    };\n    \n    // Get pixel distance\n    const pixelDistance = calculateDistance(points[0], points[1]);\n    \n    // Convert to mm (this is a mock conversion - in real app would be calibrated)\n    // For demo, we're using arbitrary conversion factors\n    let mmDistance = 0;\n    let accuracy = 0;\n    \n    switch (measurementType) {\n      case 'pupillary':\n        // Typical PD range is 54-74mm\n        mmDistance = 54 + (pixelDistance / 10);\n        accuracy = Math.min(100, 70 + Math.random() * 30); // Random accuracy for demo\n        break;\n      case 'temple_width':\n        // Typical temple width range is 130-150mm\n        mmDistance = 130 + (pixelDistance / 15);\n        accuracy = Math.min(100, 70 + Math.random() * 30);\n        break;\n      case 'face_height':\n        // Typical face height range is 180-230mm\n        mmDistance = 180 + (pixelDistance / 20);\n        accuracy = Math.min(100, 70 + Math.random() * 30);\n        break;\n      case 'bridge':\n        // Typical bridge width range is 15-25mm\n        mmDistance = 15 + (pixelDistance / 30);\n        accuracy = Math.min(100, 70 + Math.random() * 30);\n        break;\n      default:\n        mmDistance = pixelDistance / 10;\n        accuracy = 70;\n    }\n    \n    // Update accuracy state\n    setAccuracy(prev => Math.max(prev, Math.floor(accuracy)));\n    \n    // Store measurement result\n    const result = {\n      type: measurementType,\n      value: parseFloat(mmDistance.toFixed(1)),\n      accuracy: parseFloat(accuracy.toFixed(1)),\n      timestamp: new Date().toISOString()\n    };\n    \n    // Add to measurements array in component state\n    gameSteps[gameStep].measurement = result;\n  };\n  \n  // Compile all measurements when game is complete\n  const compileMeasurements = () => {\n    // Generate measurement results from all steps\n    const results = {\n      pupillaryDistance: gameSteps.find(step => step.id === 'pupillary')?.measurement?.value || 63,\n      templeLength: gameSteps.find(step => step.id === 'temple_width')?.measurement?.value || 140,\n      bridgeWidth: gameSteps.find(step => step.id === 'bridge')?.measurement?.value || 18,\n      faceHeight: gameSteps.find(step => step.id === 'face_height')?.measurement?.value || 200,\n      frameWidth: 0, // Calculated from other measurements\n      lensWidth: 0, // Calculated\n      lensHeight: 0, // Calculated\n      scanQuality: accuracy / 100,\n      completionTime: timer,\n      scanDataURL: null, // Would be a data URL of a face scan in a real app\n      timestamp: new Date().toISOString()\n    };\n    \n    // Calculate additional measurements\n    results.frameWidth = results.templeLength * 0.9; // Approximate\n    results.lensWidth = results.pupillaryDistance * 0.75; // Approximate\n    results.lensHeight = results.lensWidth * 0.6; // Common aspect ratio\n    \n    // Show completion dialog and call callback\n    onMeasurementComplete(results);\n    \n    // Reset game state\n    setGameStarted(false);\n    clearInterval(timerInterval);\n    setTimerInterval(null);\n  };\n  \n  // Draw measuring points and lines on canvas\n  useEffect(() => {\n    if (!canvasRef.current || !videoRef.current || !cameraReady) return;\n    \n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    \n    const drawFrame = () => {\n      // Draw video frame\n      ctx.drawImage(video, 0, 0);\n      \n      // Draw measurement points\n      if (measurementPoints.length > 0) {\n        measurementPoints.forEach((point, index) => {\n          // Draw point\n          ctx.beginPath();\n          ctx.arc(point.x, point.y, 8, 0, Math.PI * 2);\n          ctx.fillStyle = theme.palette.primary.main;\n          ctx.fill();\n          \n          // Draw point number\n          ctx.font = '16px Arial';\n          ctx.fillStyle = 'white';\n          ctx.fillText(index + 1, point.x - 5, point.y + 5);\n        });\n        \n        // Draw line between points\n        if (measurementPoints.length >= 2) {\n          ctx.beginPath();\n          ctx.moveTo(measurementPoints[0].x, measurementPoints[0].y);\n          ctx.lineTo(measurementPoints[1].x, measurementPoints[1].y);\n          ctx.strokeStyle = theme.palette.secondary.main;\n          ctx.lineWidth = 3;\n          ctx.stroke();\n          \n          // Calculate and display distance\n          const dx = measurementPoints[1].x - measurementPoints[0].x;\n          const dy = measurementPoints[1].y - measurementPoints[0].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          // Convert to approximate mm (mock)\n          const currentStep = gameSteps[gameStep];\n          let mmDistance = 0;\n          \n          switch (currentStep.id) {\n            case 'pupillary':\n              mmDistance = 54 + (distance / 10);\n              break;\n            case 'temple_width':\n              mmDistance = 130 + (distance / 15);\n              break;\n            case 'face_height':\n              mmDistance = 180 + (distance / 20);\n              break;\n            case 'bridge':\n              mmDistance = 15 + (distance / 30);\n              break;\n            default:\n              mmDistance = distance / 10;\n          }\n          \n          // Draw distance text\n          const midX = (measurementPoints[0].x + measurementPoints[1].x) / 2;\n          const midY = (measurementPoints[0].y + measurementPoints[1].y) / 2 - 20;\n          \n          ctx.font = 'bold 16px Arial';\n          ctx.fillStyle = 'white';\n          ctx.strokeStyle = 'black';\n          ctx.lineWidth = 3;\n          const text = `${mmDistance.toFixed(1)} ${currentStep.measurementUnits}`;\n          ctx.strokeText(text, midX - 30, midY);\n          ctx.fillText(text, midX - 30, midY);\n        }\n      }\n      \n      // Show calibration overlay during calibration\n      if (isCalibrating) {\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        \n        // Draw face outline\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.ellipse(canvas.width/2, canvas.height/2, canvas.width/4, canvas.height/3, 0, 0, Math.PI * 2);\n        ctx.stroke();\n        \n        // Draw text\n        ctx.font = '24px Arial';\n        ctx.fillStyle = 'white';\n        ctx.textAlign = 'center';\n        ctx.fillText('Calibrating...', canvas.width/2, canvas.height/2 - 100);\n        ctx.fillText(`${calibrationProgress}%`, canvas.width/2, canvas.height/2 + 120);\n      }\n      \n      requestAnimationFrame(drawFrame);\n    };\n    \n    const frameId = requestAnimationFrame(drawFrame);\n    \n    return () => {\n      cancelAnimationFrame(frameId);\n    };\n  }, [cameraReady, measurementPoints, isCalibrating, calibrationProgress, gameStep, theme]);\n  \n  // Render instruction dialog\n  const renderInstructionDialog = () => (\n    <Dialog\n      open={showInstruction && cameraReady}\n      onClose={() => setShowInstruction(false)}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle>\n        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n          <GameIcon color=\"primary\" />\n          <Typography variant=\"h6\">Face Measurement Game</Typography>\n        </Stack>\n      </DialogTitle>\n      <DialogContent>\n        <Typography paragraph>\n          Let's make face measurements fun! Follow these simple steps:\n        </Typography>\n        <Stack spacing={2}>\n          <Paper variant=\"outlined\" sx={{ p: 2 }}>\n            <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\n              1. Camera Calibration\n            </Typography>\n            <Typography>\n              We'll first calibrate the camera to ensure accurate measurements.\n              Just position your face in the center of the frame.\n            </Typography>\n          </Paper>\n          \n          <Paper variant=\"outlined\" sx={{ p: 2 }}>\n            <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\n              2. Follow Instructions\n            </Typography>\n            <Typography>\n              For each measurement, you'll be asked to click on specific points\n              on your face. Be as precise as possible for better results!\n            </Typography>\n          </Paper>\n          \n          <Paper variant=\"outlined\" sx={{ p: 2 }}>\n            <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"bold\">\n              3. Complete All Measurements\n            </Typography>\n            <Typography>\n              Complete all measurements to get your final score and accurate\n              eyewear recommendations.\n            </Typography>\n          </Paper>\n        </Stack>\n      </DialogContent>\n      <DialogActions>\n        <Button \n          onClick={() => {\n            setShowInstruction(false);\n            startCalibration();\n          }}\n          variant=\"contained\"\n          startIcon={<CameraIcon />}\n        >\n          Start Calibration\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n  \n  return (\n    <Box sx={{ position: 'relative' }}>\n      {/* Game stats display */}\n      {gameStarted && (\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            mb: 2,\n            px: 2,\n            py: 1,\n            backgroundColor: theme.palette.background.paper,\n            borderRadius: 1,\n            boxShadow: 1\n          }}\n        >\n          <Typography variant=\"body2\">\n            <strong>Score:</strong> {score}\n          </Typography>\n          <Typography variant=\"body2\">\n            <strong>Accuracy:</strong> {accuracy}%\n          </Typography>\n          <Typography variant=\"body2\">\n            <strong>Time:</strong> {timer}s\n          </Typography>\n        </Box>\n      )}\n      \n      {/* Current measurement instructions */}\n      {gameStarted && currentMeasurement && (\n        <Paper\n          elevation={3}\n          sx={{\n            p: 2,\n            mb: 2,\n            backgroundColor: theme.palette.primary.main,\n            color: 'white'\n          }}\n        >\n          <Typography variant=\"h6\" gutterBottom>\n            {currentMeasurement.title}\n          </Typography>\n          <Typography variant=\"body2\">\n            {currentMeasurement.instruction}\n          </Typography>\n          <Typography variant=\"h5\" align=\"center\" sx={{ my: 1 }}>\n            {currentMeasurement.image}\n          </Typography>\n          <Typography variant=\"body2\" fontStyle=\"italic\">\n            Click Points: {measurementPoints.length}/{currentMeasurement.pointsNeeded}\n          </Typography>\n        </Paper>\n      )}\n      \n      {/* Video and canvas container */}\n      <Box \n        sx={{ \n          position: 'relative',\n          height: 450,\n          backgroundColor: '#000',\n          borderRadius: 2,\n          overflow: 'hidden'\n        }}\n        onClick={handleCanvasClick}\n      >\n        <video\n          ref={videoRef}\n          autoPlay\n          playsInline\n          muted\n          style={{\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover'\n          }}\n        />\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%'\n          }}\n        />\n        \n        {/* Success indicator */}\n        {showSuccess && (\n          <Box\n            sx={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: 'rgba(0, 0, 0, 0.5)',\n              zIndex: 10\n            }}\n          >\n            <CheckIcon\n              sx={{\n                fontSize: 60,\n                color: 'lightgreen',\n                mb: 2\n              }}\n            />\n            <Typography\n              variant=\"h5\"\n              sx={{\n                color: 'white',\n                textShadow: '1px 1px 3px rgba(0,0,0,0.7)'\n              }}\n            >\n              {gameSteps[gameStep].successMessage}\n            </Typography>\n          </Box>\n        )}\n        \n        {/* Calibration overlay */}\n        {isCalibrating && (\n          <Box\n            sx={{\n              position: 'absolute',\n              bottom: 0,\n              left: 0,\n              width: '100%',\n              bgcolor: 'rgba(0, 0, 0, 0.7)',\n              p: 2\n            }}\n          >\n            <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n              Calibrating Camera...\n            </Typography>\n            <LinearProgress variant=\"determinate\" value={calibrationProgress} />\n          </Box>\n        )}\n        \n        {/* Start button overlay */}\n        {!gameStarted && !isCalibrating && cameraReady && (\n          <Box\n            sx={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: 'rgba(0, 0, 0, 0.6)',\n              zIndex: 10\n            }}\n          >\n            <GameIcon sx={{ fontSize: 48, color: 'white', mb: 2 }} />\n            <Typography\n              variant=\"h5\"\n              sx={{\n                color: 'white',\n                mb: 3\n              }}\n            >\n              Face Measurement Game\n            </Typography>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              startIcon={<GameIcon />}\n              onClick={handleStartGame}\n            >\n              Start Game\n            </Button>\n          </Box>\n        )}\n        \n        {/* Camera not ready message */}\n        {!cameraReady && (\n          <Box\n            sx={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              zIndex: 10\n            }}\n          >\n            <Typography\n              variant=\"h6\"\n              sx={{\n                color: 'white',\n                mb: 2\n              }}\n            >\n              Initializing Camera...\n            </Typography>\n            <LinearProgress sx={{ width: '50%' }} />\n          </Box>\n        )}\n      </Box>\n      \n      {/* Render instruction dialog */}\n      {renderInstructionDialog()}\n    </Box>\n  );\n};\n\nexport default GamifiedMeasurement; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}