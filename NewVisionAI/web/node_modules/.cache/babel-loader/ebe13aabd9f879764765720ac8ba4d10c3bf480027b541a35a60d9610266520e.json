{"ast":null,"code":"/**\n * Authentication service for token management\n */\n\n// Token storage key\nconst TOKEN_KEY = 'newvision_auth_token';\n\n/**\n * Get the auth token from localStorage\n * @returns {string|null} The token or null if not found\n */\nexport const getAuthToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Set the auth token in localStorage\n * @param {string} token - The JWT token to store\n */\nexport const setAuthToken = token => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\n\n/**\n * Remove the auth token from localStorage\n */\nexport const removeAuthToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\n/**\n * Check if a user is authenticated\n * @returns {boolean} True if the user has a valid token\n */\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  if (!token) return false;\n  try {\n    // JWT tokens format: header.payload.signature\n    const payload = token.split('.')[1];\n    if (!payload) return false;\n\n    // Decode the base64 payload\n    const decodedData = JSON.parse(atob(payload));\n\n    // Check if token is expired\n    const expiration = decodedData.exp * 1000; // convert to milliseconds\n    return expiration > Date.now();\n  } catch (error) {\n    console.error('Error verifying token:', error);\n    return false;\n  }\n};\nexport default {\n  getAuthToken,\n  setAuthToken,\n  removeAuthToken,\n  isAuthenticated\n};","map":{"version":3,"names":["TOKEN_KEY","getAuthToken","localStorage","getItem","setAuthToken","token","setItem","removeAuthToken","removeItem","isAuthenticated","payload","split","decodedData","JSON","parse","atob","expiration","exp","Date","now","error","console"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/services/authService.js"],"sourcesContent":["/**\n * Authentication service for token management\n */\n\n// Token storage key\nconst TOKEN_KEY = 'newvision_auth_token';\n\n/**\n * Get the auth token from localStorage\n * @returns {string|null} The token or null if not found\n */\nexport const getAuthToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Set the auth token in localStorage\n * @param {string} token - The JWT token to store\n */\nexport const setAuthToken = (token) => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\n\n/**\n * Remove the auth token from localStorage\n */\nexport const removeAuthToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\n/**\n * Check if a user is authenticated\n * @returns {boolean} True if the user has a valid token\n */\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  if (!token) return false;\n  \n  try {\n    // JWT tokens format: header.payload.signature\n    const payload = token.split('.')[1];\n    if (!payload) return false;\n    \n    // Decode the base64 payload\n    const decodedData = JSON.parse(atob(payload));\n    \n    // Check if token is expired\n    const expiration = decodedData.exp * 1000; // convert to milliseconds\n    return expiration > Date.now();\n  } catch (error) {\n    console.error('Error verifying token:', error);\n    return false;\n  }\n};\n\nexport default {\n  getAuthToken,\n  setAuthToken,\n  removeAuthToken,\n  isAuthenticated\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,SAAS,GAAG,sBAAsB;;AAExC;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOC,YAAY,CAACC,OAAO,CAACH,SAAS,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAIC,KAAK,IAAK;EACrCH,YAAY,CAACI,OAAO,CAACN,SAAS,EAAEK,KAAK,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnCL,YAAY,CAACM,UAAU,CAACR,SAAS,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMS,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMJ,KAAK,GAAGJ,YAAY,CAAC,CAAC;EAC5B,IAAI,CAACI,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF;IACA,MAAMK,OAAO,GAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnC,IAAI,CAACD,OAAO,EAAE,OAAO,KAAK;;IAE1B;IACA,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,OAAO,CAAC,CAAC;;IAE7C;IACA,MAAMM,UAAU,GAAGJ,WAAW,CAACK,GAAG,GAAG,IAAI,CAAC,CAAC;IAC3C,OAAOD,UAAU,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,KAAK;EACd;AACF,CAAC;AAED,eAAe;EACbnB,YAAY;EACZG,YAAY;EACZG,eAAe;EACfE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}