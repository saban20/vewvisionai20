{"ast":null,"code":"var _jsxFileName = \"/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/context/SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { initializeSocket, disconnectSocket, getSocket } from '../services/socketService';\nimport { getUserId } from '../utils/auth';\n\n// Create Socket context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\n\n// Socket Provider component\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socketReady, setSocketReady] = useState(false);\n  const [processingUpdates, setProcessingUpdates] = useState([]);\n  const [latestAnalysis, setLatestAnalysis] = useState(null);\n\n  // Initialize socket when component mounts\n  useEffect(() => {\n    const userId = getUserId();\n    if (userId) {\n      const socket = initializeSocket(userId);\n\n      // Set up event listeners\n      socket.on('connect', () => {\n        console.log('Socket connected with ID:', socket.id);\n        setSocketReady(true);\n      });\n      socket.on('processing_update', data => {\n        console.log('Processing update:', data);\n        setProcessingUpdates(prev => [...prev, data]);\n      });\n      socket.on('face_analysis_result', data => {\n        console.log('Face analysis result:', data);\n        setLatestAnalysis(data);\n      });\n    }\n\n    // Clean up when component unmounts\n    return () => {\n      disconnectSocket();\n      setSocketReady(false);\n    };\n  }, []);\n\n  // Value to provide to consumers\n  const contextValue = {\n    socket: getSocket(),\n    socketReady,\n    processingUpdates,\n    latestAnalysis,\n    clearUpdates: () => setProcessingUpdates([])\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the socket context\n_s(SocketProvider, \"GfM4B4ioXzh4ETG6GFL4N2hdMRE=\");\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","initializeSocket","disconnectSocket","getSocket","getUserId","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socketReady","setSocketReady","processingUpdates","setProcessingUpdates","latestAnalysis","setLatestAnalysis","userId","socket","on","console","log","id","data","prev","contextValue","clearUpdates","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { initializeSocket, disconnectSocket, getSocket } from '../services/socketService';\nimport { getUserId } from '../utils/auth';\n\n// Create Socket context\nconst SocketContext = createContext(null);\n\n// Socket Provider component\nexport const SocketProvider = ({ children }) => {\n  const [socketReady, setSocketReady] = useState(false);\n  const [processingUpdates, setProcessingUpdates] = useState([]);\n  const [latestAnalysis, setLatestAnalysis] = useState(null);\n\n  // Initialize socket when component mounts\n  useEffect(() => {\n    const userId = getUserId();\n    \n    if (userId) {\n      const socket = initializeSocket(userId);\n      \n      // Set up event listeners\n      socket.on('connect', () => {\n        console.log('Socket connected with ID:', socket.id);\n        setSocketReady(true);\n      });\n      \n      socket.on('processing_update', (data) => {\n        console.log('Processing update:', data);\n        setProcessingUpdates(prev => [...prev, data]);\n      });\n      \n      socket.on('face_analysis_result', (data) => {\n        console.log('Face analysis result:', data);\n        setLatestAnalysis(data);\n      });\n    }\n    \n    // Clean up when component unmounts\n    return () => {\n      disconnectSocket();\n      setSocketReady(false);\n    };\n  }, []);\n  \n  // Value to provide to consumers\n  const contextValue = {\n    socket: getSocket(),\n    socketReady,\n    processingUpdates,\n    latestAnalysis,\n    clearUpdates: () => setProcessingUpdates([])\n  };\n  \n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Custom hook to use the socket context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport default SocketContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,gBAAgB,EAAEC,gBAAgB,EAAEC,SAAS,QAAQ,2BAA2B;AACzF,SAASC,SAAS,QAAQ,eAAe;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGV,aAAa,CAAC,IAAI,CAAC;;AAEzC;AACA,OAAO,MAAMW,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACa,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACAD,SAAS,CAAC,MAAM;IACd,MAAMkB,MAAM,GAAGb,SAAS,CAAC,CAAC;IAE1B,IAAIa,MAAM,EAAE;MACV,MAAMC,MAAM,GAAGjB,gBAAgB,CAACgB,MAAM,CAAC;;MAEvC;MACAC,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;QACzBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,MAAM,CAACI,EAAE,CAAC;QACnDV,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC,CAAC;MAEFM,MAAM,CAACC,EAAE,CAAC,mBAAmB,EAAGI,IAAI,IAAK;QACvCH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEE,IAAI,CAAC;QACvCT,oBAAoB,CAACU,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,IAAI,CAAC,CAAC;MAC/C,CAAC,CAAC;MAEFL,MAAM,CAACC,EAAE,CAAC,sBAAsB,EAAGI,IAAI,IAAK;QAC1CH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,IAAI,CAAC;QAC1CP,iBAAiB,CAACO,IAAI,CAAC;MACzB,CAAC,CAAC;IACJ;;IAEA;IACA,OAAO,MAAM;MACXrB,gBAAgB,CAAC,CAAC;MAClBU,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMa,YAAY,GAAG;IACnBP,MAAM,EAAEf,SAAS,CAAC,CAAC;IACnBQ,WAAW;IACXE,iBAAiB;IACjBE,cAAc;IACdW,YAAY,EAAEA,CAAA,KAAMZ,oBAAoB,CAAC,EAAE;EAC7C,CAAC;EAED,oBACER,OAAA,CAACC,aAAa,CAACoB,QAAQ;IAACC,KAAK,EAAEH,YAAa;IAAAhB,QAAA,EACzCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;;AAED;AAAAtB,EAAA,CApDaF,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAqD3B,OAAO,MAAM0B,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGtC,UAAU,CAACS,aAAa,CAAC;EACzC,IAAI,CAAC6B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAQtB,eAAe3B,aAAa;AAAC,IAAA0B,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}