{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { getAuthToken } from './authService';\n\n// Get API URL from environment or default to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create socket instance\nlet socket;\n\n/**\n * Initialize and connect to the WebSocket server\n * @param {string} userId - The current user's ID\n * @returns {object} The socket instance\n */\nexport const initializeSocket = userId => {\n  if (!socket) {\n    // Connect to the socket.io server with authentication\n    socket = io(API_URL, {\n      auth: {\n        token: getAuthToken()\n      },\n      transports: ['websocket', 'polling'],\n      autoConnect: true\n    });\n\n    // Set up connection event handlers\n    socket.on('connect', () => {\n      console.log('Socket connected');\n\n      // Join the user's room for private messages\n      socket.emit('join', {\n        user_id: userId\n      });\n    });\n    socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n    });\n    socket.on('disconnect', reason => {\n      console.log('Socket disconnected:', reason);\n    });\n  }\n  return socket;\n};\n\n/**\n * Disconnect the socket\n */\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\n\n/**\n * Get the current socket instance\n * @returns {object|null} The socket instance or null if not initialized\n */\nexport const getSocket = () => socket;\n\n/**\n * Subscribe to a socket event\n * @param {string} event - The event name to subscribe to\n * @param {function} callback - The callback function to execute when the event is received\n */\nexport const subscribeToEvent = (event, callback) => {\n  if (socket) {\n    socket.on(event, callback);\n  } else {\n    console.warn('Socket not initialized. Call initializeSocket first.');\n  }\n};\n\n/**\n * Unsubscribe from a socket event\n * @param {string} event - The event name to unsubscribe from\n * @param {function} callback - The callback function to remove\n */\nexport const unsubscribeFromEvent = (event, callback) => {\n  if (socket) {\n    if (callback) {\n      socket.off(event, callback);\n    } else {\n      socket.off(event);\n    }\n  }\n};\n\n/**\n * Send an event to the server\n * @param {string} event - The event name to emit\n * @param {object} data - The data to send\n */\nexport const emitEvent = (event, data) => {\n  if (socket) {\n    socket.emit(event, data);\n  } else {\n    console.warn('Socket not initialized. Call initializeSocket first.');\n  }\n};\nexport default {\n  initializeSocket,\n  disconnectSocket,\n  getSocket,\n  subscribeToEvent,\n  unsubscribeFromEvent,\n  emitEvent\n};","map":{"version":3,"names":["io","getAuthToken","API_URL","process","env","REACT_APP_API_URL","socket","initializeSocket","userId","auth","token","transports","autoConnect","on","console","log","emit","user_id","error","reason","disconnectSocket","disconnect","getSocket","subscribeToEvent","event","callback","warn","unsubscribeFromEvent","off","emitEvent","data"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { getAuthToken } from './authService';\n\n// Get API URL from environment or default to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create socket instance\nlet socket;\n\n/**\n * Initialize and connect to the WebSocket server\n * @param {string} userId - The current user's ID\n * @returns {object} The socket instance\n */\nexport const initializeSocket = (userId) => {\n  if (!socket) {\n    // Connect to the socket.io server with authentication\n    socket = io(API_URL, {\n      auth: {\n        token: getAuthToken()\n      },\n      transports: ['websocket', 'polling'],\n      autoConnect: true\n    });\n\n    // Set up connection event handlers\n    socket.on('connect', () => {\n      console.log('Socket connected');\n      \n      // Join the user's room for private messages\n      socket.emit('join', { user_id: userId });\n    });\n\n    socket.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n    });\n\n    socket.on('disconnect', (reason) => {\n      console.log('Socket disconnected:', reason);\n    });\n  }\n\n  return socket;\n};\n\n/**\n * Disconnect the socket\n */\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\n\n/**\n * Get the current socket instance\n * @returns {object|null} The socket instance or null if not initialized\n */\nexport const getSocket = () => socket;\n\n/**\n * Subscribe to a socket event\n * @param {string} event - The event name to subscribe to\n * @param {function} callback - The callback function to execute when the event is received\n */\nexport const subscribeToEvent = (event, callback) => {\n  if (socket) {\n    socket.on(event, callback);\n  } else {\n    console.warn('Socket not initialized. Call initializeSocket first.');\n  }\n};\n\n/**\n * Unsubscribe from a socket event\n * @param {string} event - The event name to unsubscribe from\n * @param {function} callback - The callback function to remove\n */\nexport const unsubscribeFromEvent = (event, callback) => {\n  if (socket) {\n    if (callback) {\n      socket.off(event, callback);\n    } else {\n      socket.off(event);\n    }\n  }\n};\n\n/**\n * Send an event to the server\n * @param {string} event - The event name to emit\n * @param {object} data - The data to send\n */\nexport const emitEvent = (event, data) => {\n  if (socket) {\n    socket.emit(event, data);\n  } else {\n    console.warn('Socket not initialized. Call initializeSocket first.');\n  }\n};\n\nexport default {\n  initializeSocket,\n  disconnectSocket,\n  getSocket,\n  subscribeToEvent,\n  unsubscribeFromEvent,\n  emitEvent\n}; "],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAExE;AACA,IAAIC,MAAM;;AAEV;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;EAC1C,IAAI,CAACF,MAAM,EAAE;IACX;IACAA,MAAM,GAAGN,EAAE,CAACE,OAAO,EAAE;MACnBO,IAAI,EAAE;QACJC,KAAK,EAAET,YAAY,CAAC;MACtB,CAAC;MACDU,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;MACpCC,WAAW,EAAE;IACf,CAAC,CAAC;;IAEF;IACAN,MAAM,CAACO,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;MAE/B;MACAT,MAAM,CAACU,IAAI,CAAC,MAAM,EAAE;QAAEC,OAAO,EAAET;MAAO,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEFF,MAAM,CAACO,EAAE,CAAC,eAAe,EAAGK,KAAK,IAAK;MACpCJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CAAC;IAEFZ,MAAM,CAACO,EAAE,CAAC,YAAY,EAAGM,MAAM,IAAK;MAClCL,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEI,MAAM,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEA,OAAOb,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAId,MAAM,EAAE;IACVA,MAAM,CAACe,UAAU,CAAC,CAAC;IACnBf,MAAM,GAAG,IAAI;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMgB,SAAS,GAAGA,CAAA,KAAMhB,MAAM;;AAErC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMiB,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACnD,IAAInB,MAAM,EAAE;IACVA,MAAM,CAACO,EAAE,CAACW,KAAK,EAAEC,QAAQ,CAAC;EAC5B,CAAC,MAAM;IACLX,OAAO,CAACY,IAAI,CAAC,sDAAsD,CAAC;EACtE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAACH,KAAK,EAAEC,QAAQ,KAAK;EACvD,IAAInB,MAAM,EAAE;IACV,IAAImB,QAAQ,EAAE;MACZnB,MAAM,CAACsB,GAAG,CAACJ,KAAK,EAAEC,QAAQ,CAAC;IAC7B,CAAC,MAAM;MACLnB,MAAM,CAACsB,GAAG,CAACJ,KAAK,CAAC;IACnB;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAGA,CAACL,KAAK,EAAEM,IAAI,KAAK;EACxC,IAAIxB,MAAM,EAAE;IACVA,MAAM,CAACU,IAAI,CAACQ,KAAK,EAAEM,IAAI,CAAC;EAC1B,CAAC,MAAM;IACLhB,OAAO,CAACY,IAAI,CAAC,sDAAsD,CAAC;EACtE;AACF,CAAC;AAED,eAAe;EACbnB,gBAAgB;EAChBa,gBAAgB;EAChBE,SAAS;EACTC,gBAAgB;EAChBI,oBAAoB;EACpBE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}