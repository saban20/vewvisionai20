{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState,useRef}from'react';import{initializeSocket,disconnectSocket,getSocket}from'../services/socketService';import{getUserId}from'../utils/auth';// Create Socket context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext(null);// Socket Provider component\nexport const SocketProvider=_ref=>{let{children}=_ref;const[socketReady,setSocketReady]=useState(false);const[processingUpdates,setProcessingUpdates]=useState([]);const[latestAnalysis,setLatestAnalysis]=useState(null);const socketRef=useRef(null);// Initialize socket when component mounts\nuseEffect(()=>{const userId=getUserId();if(userId){// Initialize the socket\nsocketRef.current=initializeSocket(userId);// Set up event listeners\nif(socketRef.current){socketRef.current.on('connect',()=>{console.log('Socket connected with ID:',socketRef.current.id);setSocketReady(true);});socketRef.current.on('processing_update',data=>{console.log('Processing update:',data);setProcessingUpdates(prev=>[...prev,data]);});socketRef.current.on('face_analysis_result',data=>{console.log('Face analysis result:',data);setLatestAnalysis(data);});}}// Clean up when component unmounts\nreturn()=>{disconnectSocket();setSocketReady(false);socketRef.current=null;};},[]);// Value to provide to consumers - use a memoized value to prevent unnecessary re-renders\nconst contextValue={socket:socketRef.current,socketReady,processingUpdates,latestAnalysis,clearUpdates:()=>setProcessingUpdates([])};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:contextValue,children:children});};// Custom hook to use the socket context\nexport const useSocket=()=>{const context=useContext(SocketContext);if(!context){throw new Error('useSocket must be used within a SocketProvider');}return context;};export default SocketContext;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","initializeSocket","disconnectSocket","getSocket","getUserId","jsx","_jsx","SocketContext","SocketProvider","_ref","children","socketReady","setSocketReady","processingUpdates","setProcessingUpdates","latestAnalysis","setLatestAnalysis","socketRef","userId","current","on","console","log","id","data","prev","contextValue","socket","clearUpdates","Provider","value","useSocket","context","Error"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { initializeSocket, disconnectSocket, getSocket } from '../services/socketService';\nimport { getUserId } from '../utils/auth';\n\n// Create Socket context\nconst SocketContext = createContext(null);\n\n// Socket Provider component\nexport const SocketProvider = ({ children }) => {\n  const [socketReady, setSocketReady] = useState(false);\n  const [processingUpdates, setProcessingUpdates] = useState([]);\n  const [latestAnalysis, setLatestAnalysis] = useState(null);\n  const socketRef = useRef(null);\n\n  // Initialize socket when component mounts\n  useEffect(() => {\n    const userId = getUserId();\n    \n    if (userId) {\n      // Initialize the socket\n      socketRef.current = initializeSocket(userId);\n      \n      // Set up event listeners\n      if (socketRef.current) {\n        socketRef.current.on('connect', () => {\n          console.log('Socket connected with ID:', socketRef.current.id);\n          setSocketReady(true);\n        });\n        \n        socketRef.current.on('processing_update', (data) => {\n          console.log('Processing update:', data);\n          setProcessingUpdates(prev => [...prev, data]);\n        });\n        \n        socketRef.current.on('face_analysis_result', (data) => {\n          console.log('Face analysis result:', data);\n          setLatestAnalysis(data);\n        });\n      }\n    }\n    \n    // Clean up when component unmounts\n    return () => {\n      disconnectSocket();\n      setSocketReady(false);\n      socketRef.current = null;\n    };\n  }, []);\n  \n  // Value to provide to consumers - use a memoized value to prevent unnecessary re-renders\n  const contextValue = {\n    socket: socketRef.current,\n    socketReady,\n    processingUpdates,\n    latestAnalysis,\n    clearUpdates: () => setProcessingUpdates([])\n  };\n  \n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Custom hook to use the socket context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport default SocketContext; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CACrF,OAASC,gBAAgB,CAAEC,gBAAgB,CAAEC,SAAS,KAAQ,2BAA2B,CACzF,OAASC,SAAS,KAAQ,eAAe,CAEzC;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,aAAa,cAAGX,aAAa,CAAC,IAAI,CAAC,CAEzC;AACA,MAAO,MAAM,CAAAY,cAAc,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACzC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACc,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAC9D,KAAM,CAACgB,cAAc,CAAEC,iBAAiB,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAAAkB,SAAS,CAAGjB,MAAM,CAAC,IAAI,CAAC,CAE9B;AACAF,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoB,MAAM,CAAGd,SAAS,CAAC,CAAC,CAE1B,GAAIc,MAAM,CAAE,CACV;AACAD,SAAS,CAACE,OAAO,CAAGlB,gBAAgB,CAACiB,MAAM,CAAC,CAE5C;AACA,GAAID,SAAS,CAACE,OAAO,CAAE,CACrBF,SAAS,CAACE,OAAO,CAACC,EAAE,CAAC,SAAS,CAAE,IAAM,CACpCC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEL,SAAS,CAACE,OAAO,CAACI,EAAE,CAAC,CAC9DX,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFK,SAAS,CAACE,OAAO,CAACC,EAAE,CAAC,mBAAmB,CAAGI,IAAI,EAAK,CAClDH,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEE,IAAI,CAAC,CACvCV,oBAAoB,CAACW,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAED,IAAI,CAAC,CAAC,CAC/C,CAAC,CAAC,CAEFP,SAAS,CAACE,OAAO,CAACC,EAAE,CAAC,sBAAsB,CAAGI,IAAI,EAAK,CACrDH,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEE,IAAI,CAAC,CAC1CR,iBAAiB,CAACQ,IAAI,CAAC,CACzB,CAAC,CAAC,CACJ,CACF,CAEA;AACA,MAAO,IAAM,CACXtB,gBAAgB,CAAC,CAAC,CAClBU,cAAc,CAAC,KAAK,CAAC,CACrBK,SAAS,CAACE,OAAO,CAAG,IAAI,CAC1B,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAO,YAAY,CAAG,CACnBC,MAAM,CAAEV,SAAS,CAACE,OAAO,CACzBR,WAAW,CACXE,iBAAiB,CACjBE,cAAc,CACda,YAAY,CAAEA,CAAA,GAAMd,oBAAoB,CAAC,EAAE,CAC7C,CAAC,CAED,mBACER,IAAA,CAACC,aAAa,CAACsB,QAAQ,EAACC,KAAK,CAAEJ,YAAa,CAAAhB,QAAA,CACzCA,QAAQ,CACa,CAAC,CAE7B,CAAC,CAED;AACA,MAAO,MAAM,CAAAqB,SAAS,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,OAAO,CAAGnC,UAAU,CAACU,aAAa,CAAC,CACzC,GAAI,CAACyB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,gDAAgD,CAAC,CACnE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,cAAe,CAAAzB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}