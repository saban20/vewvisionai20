{"ast":null,"code":"var _jsxFileName = \"/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/context/SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { initializeSocket, disconnectSocket, getSocket } from '../services/socketService';\nimport { getUserId } from '../utils/auth';\n\n// Create Socket context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\n\n// Socket Provider component\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socketReady, setSocketReady] = useState(false);\n  const [processingUpdates, setProcessingUpdates] = useState([]);\n  const [latestAnalysis, setLatestAnalysis] = useState(null);\n  const socketRef = useRef(null);\n\n  // Initialize socket when component mounts\n  useEffect(() => {\n    const userId = getUserId();\n    if (userId) {\n      // Initialize the socket\n      socketRef.current = initializeSocket(userId);\n\n      // Set up event listeners\n      if (socketRef.current) {\n        socketRef.current.on('connect', () => {\n          console.log('Socket connected with ID:', socketRef.current.id);\n          setSocketReady(true);\n        });\n        socketRef.current.on('processing_update', data => {\n          console.log('Processing update:', data);\n          setProcessingUpdates(prev => [...prev, data]);\n        });\n        socketRef.current.on('face_analysis_result', data => {\n          console.log('Face analysis result:', data);\n          setLatestAnalysis(data);\n        });\n      }\n    }\n\n    // Clean up when component unmounts\n    return () => {\n      disconnectSocket();\n      setSocketReady(false);\n      socketRef.current = null;\n    };\n  }, []);\n\n  // Value to provide to consumers - use a memoized value to prevent unnecessary re-renders\n  const contextValue = {\n    socket: socketRef.current,\n    socketReady,\n    processingUpdates,\n    latestAnalysis,\n    clearUpdates: () => setProcessingUpdates([])\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the socket context\n_s(SocketProvider, \"manw+2zHDEK0O5Vxmc+BKAojVdo=\");\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","initializeSocket","disconnectSocket","getSocket","getUserId","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socketReady","setSocketReady","processingUpdates","setProcessingUpdates","latestAnalysis","setLatestAnalysis","socketRef","userId","current","on","console","log","id","data","prev","contextValue","socket","clearUpdates","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { initializeSocket, disconnectSocket, getSocket } from '../services/socketService';\nimport { getUserId } from '../utils/auth';\n\n// Create Socket context\nconst SocketContext = createContext(null);\n\n// Socket Provider component\nexport const SocketProvider = ({ children }) => {\n  const [socketReady, setSocketReady] = useState(false);\n  const [processingUpdates, setProcessingUpdates] = useState([]);\n  const [latestAnalysis, setLatestAnalysis] = useState(null);\n  const socketRef = useRef(null);\n\n  // Initialize socket when component mounts\n  useEffect(() => {\n    const userId = getUserId();\n    \n    if (userId) {\n      // Initialize the socket\n      socketRef.current = initializeSocket(userId);\n      \n      // Set up event listeners\n      if (socketRef.current) {\n        socketRef.current.on('connect', () => {\n          console.log('Socket connected with ID:', socketRef.current.id);\n          setSocketReady(true);\n        });\n        \n        socketRef.current.on('processing_update', (data) => {\n          console.log('Processing update:', data);\n          setProcessingUpdates(prev => [...prev, data]);\n        });\n        \n        socketRef.current.on('face_analysis_result', (data) => {\n          console.log('Face analysis result:', data);\n          setLatestAnalysis(data);\n        });\n      }\n    }\n    \n    // Clean up when component unmounts\n    return () => {\n      disconnectSocket();\n      setSocketReady(false);\n      socketRef.current = null;\n    };\n  }, []);\n  \n  // Value to provide to consumers - use a memoized value to prevent unnecessary re-renders\n  const contextValue = {\n    socket: socketRef.current,\n    socketReady,\n    processingUpdates,\n    latestAnalysis,\n    clearUpdates: () => setProcessingUpdates([])\n  };\n  \n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Custom hook to use the socket context\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport default SocketContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}