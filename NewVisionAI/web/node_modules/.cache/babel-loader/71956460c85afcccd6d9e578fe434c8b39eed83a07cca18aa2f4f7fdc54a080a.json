{"ast":null,"code":"/**\n * Authentication utilities for handling tokens and user sessions\n */\n\n// Token storage key\nconst TOKEN_KEY = 'newvision_auth_token';\nconst USER_DATA_KEY = 'newvision_user_data';\n\n/**\n * Stores the authentication token in local storage\n * @param {string} token - JWT token to store\n */\nexport const setToken = token => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\n\n/**\n * Retrieves the authentication token from local storage\n * @returns {string|null} The stored token or null if not found\n */\nexport const getToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Removes the authentication token from local storage\n */\nexport const removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\n/**\n * Stores user data in local storage\n * @param {Object} userData - User data object to store\n */\nexport const setUserData = userData => {\n  localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n};\n\n/**\n * Retrieves user data from local storage\n * @returns {Object|null} The stored user data or null if not found\n */\nexport const getUserData = () => {\n  const userData = localStorage.getItem(USER_DATA_KEY);\n  return userData ? JSON.parse(userData) : null;\n};\n\n/**\n * Removes user data from local storage\n */\nexport const removeUserData = () => {\n  localStorage.removeItem(USER_DATA_KEY);\n};\n\n/**\n * Checks if the token exists and is valid\n * @param {string} token - JWT token to check\n * @returns {boolean} True if token is valid, false otherwise\n */\nexport const isTokenValid = token => {\n  if (!token) return false;\n  try {\n    // JWT tokens are in the format: header.payload.signature\n    const payload = token.split('.')[1];\n    if (!payload) return false;\n\n    // Decode the base64 payload\n    const base64 = payload.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    const {\n      exp\n    } = JSON.parse(jsonPayload);\n\n    // Check if token is expired\n    return exp * 1000 > Date.now();\n  } catch (error) {\n    console.error('Error validating token:', error);\n    return false;\n  }\n};\n\n/**\n * Logs out the user by removing all authentication data\n */\nexport const logout = () => {\n  removeToken();\n  removeUserData();\n};\n\n/**\n * Logs in the user by storing token and user data\n * @param {string} token - JWT token\n * @param {Object} userData - User data\n */\nexport const login = (token, userData) => {\n  setToken(token);\n  setUserData(userData);\n};\n\n/**\n * Checks if user is authenticated\n * @returns {boolean} True if user is authenticated\n */\nexport const isAuthenticated = () => {\n  const token = getToken();\n  return token && isTokenValid(token);\n};","map":{"version":3,"names":["TOKEN_KEY","USER_DATA_KEY","setToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","setUserData","userData","JSON","stringify","getUserData","parse","removeUserData","isTokenValid","payload","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","exp","Date","now","error","console","logout","login","isAuthenticated"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/utils/auth.js"],"sourcesContent":["/**\n * Authentication utilities for handling tokens and user sessions\n */\n\n// Token storage key\nconst TOKEN_KEY = 'newvision_auth_token';\nconst USER_DATA_KEY = 'newvision_user_data';\n\n/**\n * Stores the authentication token in local storage\n * @param {string} token - JWT token to store\n */\nexport const setToken = (token) => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\n\n/**\n * Retrieves the authentication token from local storage\n * @returns {string|null} The stored token or null if not found\n */\nexport const getToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Removes the authentication token from local storage\n */\nexport const removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\n/**\n * Stores user data in local storage\n * @param {Object} userData - User data object to store\n */\nexport const setUserData = (userData) => {\n  localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n};\n\n/**\n * Retrieves user data from local storage\n * @returns {Object|null} The stored user data or null if not found\n */\nexport const getUserData = () => {\n  const userData = localStorage.getItem(USER_DATA_KEY);\n  return userData ? JSON.parse(userData) : null;\n};\n\n/**\n * Removes user data from local storage\n */\nexport const removeUserData = () => {\n  localStorage.removeItem(USER_DATA_KEY);\n};\n\n/**\n * Checks if the token exists and is valid\n * @param {string} token - JWT token to check\n * @returns {boolean} True if token is valid, false otherwise\n */\nexport const isTokenValid = (token) => {\n  if (!token) return false;\n  \n  try {\n    // JWT tokens are in the format: header.payload.signature\n    const payload = token.split('.')[1];\n    if (!payload) return false;\n    \n    // Decode the base64 payload\n    const base64 = payload.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n      atob(base64)\n        .split('')\n        .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n        .join('')\n    );\n    \n    const { exp } = JSON.parse(jsonPayload);\n    \n    // Check if token is expired\n    return exp * 1000 > Date.now();\n  } catch (error) {\n    console.error('Error validating token:', error);\n    return false;\n  }\n};\n\n/**\n * Logs out the user by removing all authentication data\n */\nexport const logout = () => {\n  removeToken();\n  removeUserData();\n};\n\n/**\n * Logs in the user by storing token and user data\n * @param {string} token - JWT token\n * @param {Object} userData - User data\n */\nexport const login = (token, userData) => {\n  setToken(token);\n  setUserData(userData);\n};\n\n/**\n * Checks if user is authenticated\n * @returns {boolean} True if user is authenticated\n */\nexport const isAuthenticated = () => {\n  const token = getToken();\n  return token && isTokenValid(token);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}