{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { getAuthToken } from './authService';\n\n// Get API URL from environment or default to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create socket instance\nlet socket = null;\nlet isInitializing = false;\n\n/**\n * Initialize and connect to the WebSocket server\n * @param {string} userId - The current user's ID\n * @returns {object} The socket instance\n */\nexport const initializeSocket = userId => {\n  // Only initialize once\n  if (socket) return socket;\n  if (isInitializing) return null;\n  isInitializing = true;\n  try {\n    // Make sure we have a userId and token\n    if (!userId) {\n      console.warn('Cannot initialize socket: No user ID provided');\n      isInitializing = false;\n      return null;\n    }\n    const token = getAuthToken();\n    if (!token) {\n      console.warn('Cannot initialize socket: No auth token available');\n      isInitializing = false;\n      return null;\n    }\n\n    // Connect to the socket.io server with authentication\n    socket = io(API_URL, {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling'],\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Set up connection event handlers\n    socket.on('connect', () => {\n      console.log('Socket connected');\n\n      // Join the user's room for private messages\n      socket.emit('join', {\n        user_id: userId\n      });\n    });\n    socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n    });\n    socket.on('disconnect', reason => {\n      console.log('Socket disconnected:', reason);\n    });\n    socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n    isInitializing = false;\n    return socket;\n  } catch (error) {\n    console.error('Error initializing socket:', error);\n    isInitializing = false;\n    return null;\n  }\n};\n\n/**\n * Disconnect the socket\n */\nexport const disconnectSocket = () => {\n  if (socket) {\n    try {\n      socket.disconnect();\n    } catch (error) {\n      console.error('Error disconnecting socket:', error);\n    } finally {\n      socket = null;\n    }\n  }\n};\n\n/**\n * Get the current socket instance\n * @returns {object|null} The socket instance or null if not initialized\n */\nexport const getSocket = () => socket;\n\n/**\n * Subscribe to a socket event\n * @param {string} event - The event name to subscribe to\n * @param {function} callback - The callback function to execute when the event is received\n */\nexport const subscribeToEvent = (event, callback) => {\n  if (socket && event && typeof callback === 'function') {\n    socket.on(event, callback);\n  } else {\n    if (!socket) {\n      console.warn('Socket not initialized. Call initializeSocket first.');\n    }\n  }\n};\n\n/**\n * Unsubscribe from a socket event\n * @param {string} event - The event name to unsubscribe from\n * @param {function} callback - The callback function to remove\n */\nexport const unsubscribeFromEvent = (event, callback) => {\n  if (socket && event) {\n    if (callback && typeof callback === 'function') {\n      socket.off(event, callback);\n    } else {\n      socket.off(event);\n    }\n  }\n};\n\n/**\n * Send an event to the server\n * @param {string} event - The event name to emit\n * @param {object} data - The data to send\n */\nexport const emitEvent = (event, data) => {\n  if (socket && event) {\n    try {\n      socket.emit(event, data);\n    } catch (error) {\n      console.error(`Error emitting event ${event}:`, error);\n    }\n  } else {\n    if (!socket) {\n      console.warn('Socket not initialized. Call initializeSocket first.');\n    }\n  }\n};\nexport default {\n  initializeSocket,\n  disconnectSocket,\n  getSocket,\n  subscribeToEvent,\n  unsubscribeFromEvent,\n  emitEvent\n};","map":{"version":3,"names":["io","getAuthToken","API_URL","process","env","REACT_APP_API_URL","socket","isInitializing","initializeSocket","userId","console","warn","token","auth","transports","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","on","log","emit","user_id","error","reason","disconnectSocket","disconnect","getSocket","subscribeToEvent","event","callback","unsubscribeFromEvent","off","emitEvent","data"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { getAuthToken } from './authService';\n\n// Get API URL from environment or default to localhost\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create socket instance\nlet socket = null;\nlet isInitializing = false;\n\n/**\n * Initialize and connect to the WebSocket server\n * @param {string} userId - The current user's ID\n * @returns {object} The socket instance\n */\nexport const initializeSocket = (userId) => {\n  // Only initialize once\n  if (socket) return socket;\n  if (isInitializing) return null;\n  \n  isInitializing = true;\n  \n  try {\n    // Make sure we have a userId and token\n    if (!userId) {\n      console.warn('Cannot initialize socket: No user ID provided');\n      isInitializing = false;\n      return null;\n    }\n    \n    const token = getAuthToken();\n    if (!token) {\n      console.warn('Cannot initialize socket: No auth token available');\n      isInitializing = false;\n      return null;\n    }\n    \n    // Connect to the socket.io server with authentication\n    socket = io(API_URL, {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling'],\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Set up connection event handlers\n    socket.on('connect', () => {\n      console.log('Socket connected');\n      \n      // Join the user's room for private messages\n      socket.emit('join', { user_id: userId });\n    });\n\n    socket.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n    });\n\n    socket.on('disconnect', (reason) => {\n      console.log('Socket disconnected:', reason);\n    });\n    \n    socket.on('error', (error) => {\n      console.error('Socket error:', error);\n    });\n    \n    isInitializing = false;\n    return socket;\n  } catch (error) {\n    console.error('Error initializing socket:', error);\n    isInitializing = false;\n    return null;\n  }\n};\n\n/**\n * Disconnect the socket\n */\nexport const disconnectSocket = () => {\n  if (socket) {\n    try {\n      socket.disconnect();\n    } catch (error) {\n      console.error('Error disconnecting socket:', error);\n    } finally {\n      socket = null;\n    }\n  }\n};\n\n/**\n * Get the current socket instance\n * @returns {object|null} The socket instance or null if not initialized\n */\nexport const getSocket = () => socket;\n\n/**\n * Subscribe to a socket event\n * @param {string} event - The event name to subscribe to\n * @param {function} callback - The callback function to execute when the event is received\n */\nexport const subscribeToEvent = (event, callback) => {\n  if (socket && event && typeof callback === 'function') {\n    socket.on(event, callback);\n  } else {\n    if (!socket) {\n      console.warn('Socket not initialized. Call initializeSocket first.');\n    }\n  }\n};\n\n/**\n * Unsubscribe from a socket event\n * @param {string} event - The event name to unsubscribe from\n * @param {function} callback - The callback function to remove\n */\nexport const unsubscribeFromEvent = (event, callback) => {\n  if (socket && event) {\n    if (callback && typeof callback === 'function') {\n      socket.off(event, callback);\n    } else {\n      socket.off(event);\n    }\n  }\n};\n\n/**\n * Send an event to the server\n * @param {string} event - The event name to emit\n * @param {object} data - The data to send\n */\nexport const emitEvent = (event, data) => {\n  if (socket && event) {\n    try {\n      socket.emit(event, data);\n    } catch (error) {\n      console.error(`Error emitting event ${event}:`, error);\n    }\n  } else {\n    if (!socket) {\n      console.warn('Socket not initialized. Call initializeSocket first.');\n    }\n  }\n};\n\nexport default {\n  initializeSocket,\n  disconnectSocket,\n  getSocket,\n  subscribeToEvent,\n  unsubscribeFromEvent,\n  emitEvent\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}