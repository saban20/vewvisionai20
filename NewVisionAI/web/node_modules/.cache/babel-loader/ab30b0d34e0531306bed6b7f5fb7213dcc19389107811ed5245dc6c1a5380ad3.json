{"ast":null,"code":"var _jsxFileName = \"/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/components/FaceScanner3D.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { Box, Typography, Button, CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaceScanner3D = ({\n  onMeasurementsComplete\n}) => {\n  _s();\n  const [scanning, setScanning] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [cameraActive, setCameraActive] = useState(false);\n  const [stream, setStream] = useState(null);\n\n  // Handle starting the camera\n  const startCamera = async () => {\n    try {\n      const constraints = {\n        video: {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          },\n          facingMode: 'user'\n        }\n      };\n      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n      setStream(mediaStream);\n      setCameraActive(true);\n    } catch (err) {\n      console.error('Error accessing camera:', err);\n      // Handle camera access error\n    }\n  };\n\n  // Stop camera\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n    setCameraActive(false);\n  };\n\n  // Clean up camera resources on unmount\n  useEffect(() => {\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [stream]);\n\n  // Capture a frame from the video\n  const captureFrame = () => {\n    if (!videoRef.current || !canvasRef.current) return null;\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // Set canvas dimensions to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw the video frame on the canvas\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to data URL\n    return canvas.toDataURL('image/png');\n  };\n\n  // Handle starting the scan process\n  const handleStartScan = async () => {\n    if (!cameraActive) {\n      await startCamera();\n      return;\n    }\n    setScanning(true);\n    setProgress(0);\n\n    // Simulate progress updates\n    const interval = setInterval(() => {\n      setProgress(prev => {\n        const newProgress = prev + 5;\n        if (newProgress >= 100) {\n          clearInterval(interval);\n\n          // Capture the final frame\n          const frameData = captureFrame();\n\n          // After scan completes, generate measurement data\n          setTimeout(() => {\n            const measurementData = {\n              faceShape: 'Oval',\n              metrics: {\n                faceWidth: 142,\n                faceHeight: 205,\n                interPupillaryDistance: 63,\n                noseToEar: 97,\n                templeLength: 145\n              },\n              frameRecommendations: [{\n                id: 101,\n                name: 'Classic Aviator',\n                matchPercentage: 95\n              }, {\n                id: 102,\n                name: 'Modern Round',\n                matchPercentage: 88\n              }, {\n                id: 103,\n                name: 'Square Frame',\n                matchPercentage: 82\n              }],\n              capturedImage: frameData\n            };\n\n            // Send data to parent component\n            if (onMeasurementsComplete) {\n              onMeasurementsComplete(measurementData);\n            }\n            setScanning(false);\n            stopCamera();\n          }, 1000);\n        }\n        return newProgress;\n      });\n    }, 100);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"3D Face Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        mb: 3\n      },\n      children: \"Position your face in the center of the frame and follow the on-screen instructions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        scale: 0.9,\n        opacity: 0\n      },\n      animate: {\n        scale: 1,\n        opacity: 1\n      },\n      transition: {\n        duration: 0.5\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          position: 'relative',\n          width: '100%',\n          maxWidth: '640px',\n          height: '480px',\n          margin: '0 auto',\n          border: '2px solid #6E56CF',\n          borderRadius: '12px',\n          overflow: 'hidden',\n          backgroundColor: 'rgba(0,0,0,0.2)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: true,\n          style: {\n            width: '100%',\n            height: '100%',\n            objectFit: 'cover',\n            transform: 'scaleX(-1)' // Mirror video\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), cameraActive && !scanning && /*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 0.7\n          },\n          style: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            width: '220px',\n            height: '300px',\n            border: '2px dashed white',\n            borderRadius: '50% 50% 45% 45%',\n            boxShadow: '0 0 20px rgba(110, 86, 207, 0.5)',\n            pointerEvents: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), scanning && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(0,0,0,0.6)',\n            zIndex: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            variant: \"determinate\",\n            value: progress,\n            size: 80,\n            thickness: 4,\n            sx: {\n              color: '#FF1493',\n              filter: 'drop-shadow(0 0 10px #FF1493)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              mt: 2,\n              color: 'white'\n            },\n            children: [\"Scanning... \", progress, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleStartScan,\n        disabled: scanning,\n        className: \"nebula-button\",\n        sx: {\n          py: 1.5,\n          px: 4,\n          fontSize: '1.1rem',\n          background: 'linear-gradient(45deg, #6E56CF 30%, #FF1493 90%)',\n          boxShadow: '0 0 15px rgba(110, 86, 207, 0.5)',\n          '&:hover': {\n            boxShadow: '0 0 20px rgba(255, 20, 147, 0.7)'\n          }\n        },\n        children: !cameraActive ? 'Start Camera' : scanning ? 'Scanning...' : 'Begin Scan'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(FaceScanner3D, \"vfneOrAZfqF4pT3kUk3IT8Dzi8M=\");\n_c = FaceScanner3D;\nexport default FaceScanner3D;\nvar _c;\n$RefreshReg$(_c, \"FaceScanner3D\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","Box","Typography","Button","CircularProgress","jsxDEV","_jsxDEV","FaceScanner3D","onMeasurementsComplete","_s","scanning","setScanning","progress","setProgress","videoRef","canvasRef","cameraActive","setCameraActive","stream","setStream","startCamera","constraints","video","width","ideal","height","facingMode","mediaStream","navigator","mediaDevices","getUserMedia","current","srcObject","err","console","error","stopCamera","getTracks","forEach","track","stop","captureFrame","canvas","context","getContext","videoWidth","videoHeight","drawImage","toDataURL","handleStartScan","interval","setInterval","prev","newProgress","clearInterval","frameData","setTimeout","measurementData","faceShape","metrics","faceWidth","faceHeight","interPupillaryDistance","noseToEar","templeLength","frameRecommendations","id","name","matchPercentage","capturedImage","sx","textAlign","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","mb","div","initial","scale","opacity","animate","transition","duration","position","maxWidth","margin","border","borderRadius","overflow","backgroundColor","ref","autoPlay","playsInline","muted","style","objectFit","transform","top","left","boxShadow","pointerEvents","right","bottom","display","flexDirection","justifyContent","alignItems","zIndex","value","size","thickness","color","filter","mt","onClick","disabled","className","py","px","fontSize","background","_c","$RefreshReg$"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/components/FaceScanner3D.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { Box, Typography, Button, CircularProgress } from '@mui/material';\n\nconst FaceScanner3D = ({ onMeasurementsComplete }) => {\n  const [scanning, setScanning] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [cameraActive, setCameraActive] = useState(false);\n  const [stream, setStream] = useState(null);\n\n  // Handle starting the camera\n  const startCamera = async () => {\n    try {\n      const constraints = {\n        video: {\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n          facingMode: 'user'\n        }\n      };\n      \n      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n      \n      setStream(mediaStream);\n      setCameraActive(true);\n    } catch (err) {\n      console.error('Error accessing camera:', err);\n      // Handle camera access error\n    }\n  };\n\n  // Stop camera\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    \n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n    \n    setCameraActive(false);\n  };\n\n  // Clean up camera resources on unmount\n  useEffect(() => {\n    return () => {\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [stream]);\n\n  // Capture a frame from the video\n  const captureFrame = () => {\n    if (!videoRef.current || !canvasRef.current) return null;\n    \n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    // Set canvas dimensions to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    \n    // Draw the video frame on the canvas\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    \n    // Convert to data URL\n    return canvas.toDataURL('image/png');\n  };\n\n  // Handle starting the scan process\n  const handleStartScan = async () => {\n    if (!cameraActive) {\n      await startCamera();\n      return;\n    }\n    \n    setScanning(true);\n    setProgress(0);\n    \n    // Simulate progress updates\n    const interval = setInterval(() => {\n      setProgress(prev => {\n        const newProgress = prev + 5;\n        if (newProgress >= 100) {\n          clearInterval(interval);\n          \n          // Capture the final frame\n          const frameData = captureFrame();\n          \n          // After scan completes, generate measurement data\n          setTimeout(() => {\n            const measurementData = {\n              faceShape: 'Oval',\n              metrics: {\n                faceWidth: 142,\n                faceHeight: 205,\n                interPupillaryDistance: 63,\n                noseToEar: 97,\n                templeLength: 145,\n              },\n              frameRecommendations: [\n                { id: 101, name: 'Classic Aviator', matchPercentage: 95 },\n                { id: 102, name: 'Modern Round', matchPercentage: 88 },\n                { id: 103, name: 'Square Frame', matchPercentage: 82 },\n              ],\n              capturedImage: frameData\n            };\n            \n            // Send data to parent component\n            if (onMeasurementsComplete) {\n              onMeasurementsComplete(measurementData);\n            }\n            \n            setScanning(false);\n            stopCamera();\n          }, 1000);\n        }\n        return newProgress;\n      });\n    }, 100);\n  };\n\n  return (\n    <Box sx={{ textAlign: 'center' }}>\n      <Typography variant=\"h4\" gutterBottom>\n        3D Face Scanner\n      </Typography>\n      \n      <Typography variant=\"body1\" sx={{ mb: 3 }}>\n        Position your face in the center of the frame and follow the on-screen instructions.\n      </Typography>\n      \n      <motion.div\n        initial={{ scale: 0.9, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Box \n          sx={{ \n            position: 'relative', \n            width: '100%', \n            maxWidth: '640px', \n            height: '480px',\n            margin: '0 auto',\n            border: '2px solid #6E56CF',\n            borderRadius: '12px',\n            overflow: 'hidden',\n            backgroundColor: 'rgba(0,0,0,0.2)'\n          }}\n        >\n          <video \n            ref={videoRef}\n            autoPlay \n            playsInline \n            muted\n            style={{ \n              width: '100%', \n              height: '100%', \n              objectFit: 'cover',\n              transform: 'scaleX(-1)' // Mirror video\n            }}\n          />\n          \n          {/* Face outline overlay when camera is active */}\n          {cameraActive && !scanning && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 0.7 }}\n              style={{\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                width: '220px',\n                height: '300px',\n                border: '2px dashed white',\n                borderRadius: '50% 50% 45% 45%',\n                boxShadow: '0 0 20px rgba(110, 86, 207, 0.5)',\n                pointerEvents: 'none'\n              }}\n            />\n          )}\n          \n          {/* Scanning overlay and progress */}\n          {scanning && (\n            <Box\n              sx={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                backgroundColor: 'rgba(0,0,0,0.6)',\n                zIndex: 2\n              }}\n            >\n              <CircularProgress \n                variant=\"determinate\" \n                value={progress} \n                size={80} \n                thickness={4}\n                sx={{ \n                  color: '#FF1493',\n                  filter: 'drop-shadow(0 0 10px #FF1493)'\n                }}\n              />\n              <Typography variant=\"h6\" sx={{ mt: 2, color: 'white' }}>\n                Scanning... {progress}%\n              </Typography>\n            </Box>\n          )}\n          \n          {/* Hidden canvas for capturing frames */}\n          <canvas ref={canvasRef} style={{ display: 'none' }} />\n        </Box>\n      </motion.div>\n      \n      <Box sx={{ mt: 4 }}>\n        <Button\n          variant=\"contained\"\n          onClick={handleStartScan}\n          disabled={scanning}\n          className=\"nebula-button\"\n          sx={{\n            py: 1.5,\n            px: 4,\n            fontSize: '1.1rem',\n            background: 'linear-gradient(45deg, #6E56CF 30%, #FF1493 90%)',\n            boxShadow: '0 0 15px rgba(110, 86, 207, 0.5)',\n            '&:hover': {\n              boxShadow: '0 0 20px rgba(255, 20, 147, 0.7)',\n            }\n          }}\n        >\n          {!cameraActive ? 'Start Camera' : scanning ? 'Scanning...' : 'Begin Scan'}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FaceScanner3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}