{"ast":null,"code":"/**\n * Authentication service for token management\n */// Token storage key\nconst TOKEN_KEY='newvision_auth_token';/**\n * Get the auth token from localStorage\n * @returns {string|null} The token or null if not found\n */export const getAuthToken=()=>{return localStorage.getItem(TOKEN_KEY);};/**\n * Set the auth token in localStorage\n * @param {string} token - The JWT token to store\n */export const setAuthToken=token=>{localStorage.setItem(TOKEN_KEY,token);};/**\n * Remove the auth token from localStorage\n */export const removeAuthToken=()=>{localStorage.removeItem(TOKEN_KEY);};/**\n * Check if a user is authenticated\n * @returns {boolean} True if the user has a valid token\n */export const isAuthenticated=()=>{const token=getAuthToken();if(!token)return false;try{// JWT tokens format: header.payload.signature\nconst payload=token.split('.')[1];if(!payload)return false;// Decode the base64 payload\nconst decodedData=JSON.parse(atob(payload));// Check if token is expired\nconst expiration=decodedData.exp*1000;// convert to milliseconds\nreturn expiration>Date.now();}catch(error){console.error('Error verifying token:',error);return false;}};export default{getAuthToken,setAuthToken,removeAuthToken,isAuthenticated};","map":{"version":3,"names":["TOKEN_KEY","getAuthToken","localStorage","getItem","setAuthToken","token","setItem","removeAuthToken","removeItem","isAuthenticated","payload","split","decodedData","JSON","parse","atob","expiration","exp","Date","now","error","console"],"sources":["/Users/saban/Desktop/New VisionAi 2.0/NewVisionAI/web/src/services/authService.js"],"sourcesContent":["/**\n * Authentication service for token management\n */\n\n// Token storage key\nconst TOKEN_KEY = 'newvision_auth_token';\n\n/**\n * Get the auth token from localStorage\n * @returns {string|null} The token or null if not found\n */\nexport const getAuthToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Set the auth token in localStorage\n * @param {string} token - The JWT token to store\n */\nexport const setAuthToken = (token) => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\n\n/**\n * Remove the auth token from localStorage\n */\nexport const removeAuthToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\n/**\n * Check if a user is authenticated\n * @returns {boolean} True if the user has a valid token\n */\nexport const isAuthenticated = () => {\n  const token = getAuthToken();\n  if (!token) return false;\n  \n  try {\n    // JWT tokens format: header.payload.signature\n    const payload = token.split('.')[1];\n    if (!payload) return false;\n    \n    // Decode the base64 payload\n    const decodedData = JSON.parse(atob(payload));\n    \n    // Check if token is expired\n    const expiration = decodedData.exp * 1000; // convert to milliseconds\n    return expiration > Date.now();\n  } catch (error) {\n    console.error('Error verifying token:', error);\n    return false;\n  }\n};\n\nexport default {\n  getAuthToken,\n  setAuthToken,\n  removeAuthToken,\n  isAuthenticated\n}; "],"mappings":"AAAA;AACA;AACA,GAEA;AACA,KAAM,CAAAA,SAAS,CAAG,sBAAsB,CAExC;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAChC,MAAO,CAAAC,YAAY,CAACC,OAAO,CAACH,SAAS,CAAC,CACxC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,YAAY,CAAIC,KAAK,EAAK,CACrCH,YAAY,CAACI,OAAO,CAACN,SAAS,CAAEK,KAAK,CAAC,CACxC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAE,eAAe,CAAGA,CAAA,GAAM,CACnCL,YAAY,CAACM,UAAU,CAACR,SAAS,CAAC,CACpC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAS,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAAAJ,KAAK,CAAGJ,YAAY,CAAC,CAAC,CAC5B,GAAI,CAACI,KAAK,CAAE,MAAO,MAAK,CAExB,GAAI,CACF;AACA,KAAM,CAAAK,OAAO,CAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACnC,GAAI,CAACD,OAAO,CAAE,MAAO,MAAK,CAE1B;AACA,KAAM,CAAAE,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,OAAO,CAAC,CAAC,CAE7C;AACA,KAAM,CAAAM,UAAU,CAAGJ,WAAW,CAACK,GAAG,CAAG,IAAI,CAAE;AAC3C,MAAO,CAAAD,UAAU,CAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,CAChC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,MAAK,CACd,CACF,CAAC,CAED,cAAe,CACbnB,YAAY,CACZG,YAAY,CACZG,eAAe,CACfE,eACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}